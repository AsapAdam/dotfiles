# Easier navigation
alias ..="cd .."
alias ...="cd ../.."

# Better GitHub integration
alias git="hub"

# Shortcuts
alias g="git"
alias h="history"

# Laravel Artisan CLI
alias art="php artisan"

# PHP Testing Framework Aliases
alias behat="./vendor/bin/behat"
alias phpunit="./vendor/phpunit/phpunit/phpunit"

# List all files in long format, including dot files
alias l="ls -Glah"

# Enable aliases to be sudo’ed
alias sudo="sudo "

# Load the iphone simulator
alias simulator="open /Applications/Xcode.app/Contents/Developer/Applications/iOS\ Simulator.app"

# Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
alias update="sudo softwareupdate -i -a; npm install -g npm@latest; composer self-update; composer global update; brew update; brew upgrade; brew cleanup; brew cask cleanup; brew doctor;"

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en0"

# Enhance dig
alias dig="dig +nostats +nocomments +nocmd"

# Recursively delete `.DS_Store` files
alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"

# Empty the Trash on all mounted volumes and the main HDD
# Also, clear Apple’s System Logs to improve shell startup speed
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl"

# Show/hide hidden files in Finder
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# Get week number
alias week="date +%V"

# Remove ".svn" folders from workingcopy recursive
alias rmsvn="find . -type d -name .svn -exec rm -rf {} \;"

# Create a new directory and enter it
function mkd() {
	mkdir -p "${@}" && cd "${_}";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function serve() {
	local port="${1:-4000}";
	sleep 1 && open "http://localhost:${port}/" & php -S "localhost:${port}";
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi
}

# `p` with no arguments opens the current directory in PhpStorm, otherwise
# opens the given location
function p() {
	if [ $# -eq 0 ]; then
		open -a PhpStorm\ EAP.app .;
	else
		open -a PhpStorm\ EAP.app "$@";
	fi
}

# `o` with no arguments opens current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi
}

# Easy file sharing from the command line
# https://github.com/dutchcoders/transfer.sh/
function transfer() {
	# write to output to tmpfile because of progress bar
	tmpfile=$( mktemp -t transferXXX )
	curl --progress-bar --upload-file $1 https://transfer.sh/$(basename $1) >> $tmpfile;
	cat $tmpfile;
	rm -f $tmpfile;
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";
	echo "${tmpFile}.gz created successfully.";
}
